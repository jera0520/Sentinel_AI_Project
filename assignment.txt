# Sentinel AI Project 과제 및 학습 가이드

---

## 최종 수행 과제

*   **과제 1 (모델 학습):** '안전모', '사람', '쓰러짐' 클래스를 탐지하는 커스텀 모델을 학습하고, 기존 모델을 개선합니다.
*   **과제 2 (기능 구현):** 학습된 커스텀 모델을 적용하여, 탐지된 객체를 이미지 파일로 크롭하여 저장하는 기능을 구현합니다.

---

## 과제 1 상세 내용 (모델 학습)

### 1. 검출 방식 제안
- **목표:** 안전장구(헬멧) 착용 여부 및 작업자 쓰러짐 인식
- **데이터:** AI Hub 데이터를 수집하여 '안전모', '사람', '쓰러짐' 클래스에 대해 100~200장 규모로 가공 및 정제합니다. (YOLO Mark 또는 자동 라벨링 사용)
- **모델:** YOLOv4를 기본 모델로 선정하되, 효율적인 운용을 위해 경량화 등을 고려합니다.

### 2. 데이터 수집
- **기준:** 프로젝트 구조 파악 후 학습에 필요한 클래스('안전모', '쓰러짐')가 명확히 보이는 '공사현장 안전장비 인식 이미지' 위주로 수집합니다.

### 3. 데이터 정제 (json → txt 변환)
- **목표:** Darknet 프레임워크에 맞게 라벨링 파일 형식을 `json`에서 `txt`로 변환합니다.
- **스크립트 예시:**
  - `convert_json_to_yolo.py` (메인 변환 프로그램)
  - `test_converter.py` (단일 파일 테스트용)

### 4. YOLO Mark를 이용한 데이터 정제/검수
- **정의:** YOLO 학습용 바운딩 박스 어노테이션 GUI 도구.
- **설치 및 빌드:**
  ```bash
  # 필수 도구 설치
  sudo apt-get install -y cmake build-essential

  # YOLO Mark 소스코드 클론 및 이동
  cd /home/jera/Sentinel_AI_Project/anu_example
  git clone https://github.com/AlexeyAB/Yolo_mark.git
  cd Yolo_mark

  # 빌드
  mkdir -p build && cd build
  cmake ..
  make
  ```
- **디렉토리 구조 설정:**
  - `Yolo_mark/x64/Release/data/img/` 경로에 이미지와 라벨(.txt) 파일들을 위치시킵니다.
  - `obj.names`와 `obj.data` 파일을 생성하여 클래스 정보를 설정합니다.

---

## 커스텀 모델 학습 절차

### 1. Darknet 학습 환경 설정
- **`obj.names` 파일 생성:** `darknet/data/` 경로에 탐지할 클래스 이름들을 작성합니다.
  ```
  helmet
  person
  fallen
  ```
- **`train.txt` & `valid.txt` 파일 생성:** 학습 및 검증에 사용할 이미지 파일의 전체 경로 목록을 생성합니다.
  ```bash
  find /path/to/your/images -name "*.jpg" > data/train.txt
  cp data/train.txt data/valid.txt
  ```
- **`obj.data` 파일 생성:** 클래스 수, 학습/검증 파일 경로 등을 지정합니다.

### 2. YOLOv4 모델 구성 파일 수정
- **설정 파일 복사:** `cfg/yolov4.cfg`를 `cfg/yolov4-custom.cfg`로 복사합니다.
- **파라미터 수정:** `yolov4-custom.cfg` 파일 내의 다음 항목들을 수정합니다.
  - `batch=64`
  - `subdivisions=16`
  - `max_batches=6000` (클래스 3개 * 2000)
  - `steps=4800, 5400` (max_batches의 80%, 90%)
  - `classes=3` (총 3곳)
  - `filters=24` ([yolo] 레이어 직전의 [convolutional] 레이어, 총 3곳)

### 3. 학습 시작
- **사전 훈련된 가중치 다운로드:**
  ```bash
  # darknet 폴더 안에서 실행
  wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137
  ```
- **학습 명령어 실행:**
  ```bash
  ./darknet detector train data/obj.data cfg/yolov4-custom.cfg yolov4.conv.137 -dont_show -map
  ```
- **오류 해결:** `CUDNN_STATUS_BAD_PARAM` 오류 발생 시, `yolov4-custom.cfg` 파일 상단 `[net]` 섹션에 `cudnn_benchmark=0`를 추가합니다.

### 4. 성능 테스트
- **테스트 명령어:** 학습이 완료된 `_best.weights` 파일을 사용하여 성능을 확인합니다.
  ```bash
  ./darknet detector test data/obj.data cfg/yolov4-custom.cfg backup/yolov4-custom_best.weights /path/to/your/test_image.jpg
  ```